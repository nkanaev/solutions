(defun move (dir p)
  (cond ((eq dir #\^) (list (+ (car p) 1) (cadr p)))
        ((eq dir #\v) (list (- (car p) 1) (cadr p)))
        ((eq dir #\<) (list (car p) (- (cadr p) 1)))
        ((eq dir #\>) (list (car p) (+ (cadr p) 1)))
        (t p)))

(defun position-set (movements)
  (let* ((pos '(0 0))
         (positions (list pos)))
    (dotimes (i (length movements) positions)
      (setf pos (move (char movements i) pos))
      (setf positions (adjoin pos positions :test 'equal)
      ))))

(defun select-char-if (pred str)
  (do* ((l (length str))
        (i 0 (+ i 1))
        (r ""))
       ((>= i l) r)
    (if (funcall pred i)
        (setf r (concatenate 'string r (vector (char str i)))))))

(defun sol-1 (movements)
  (length (position-set movements)))

(defun sol-2 (movements)
  (let ((moves-santa (select-char-if #'evenp movements))
        (moves-bot (select-char-if #'oddp movements)))
    (length (union (position-set moves-santa)
                   (position-set moves-bot)
                   :test #'equal))))

(setf input (read-line))
(print (sol-1 input))
(print (sol-2 input))
